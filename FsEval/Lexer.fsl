{
module Lexer

open System
open Parser
open Microsoft.FSharp.Text.Lexing

let lexeme lexbuf = LexBuffer<_>.LexemeString lexbuf
}

let digit = ['0'-'9']
let char = ['a'-'z' 'A'-'Z']
let whitespace = [' ' '\t']
let newline = ('\n' | 'r' 'n')
let identifier = ('[' (digit|char)+ ']')
let string = ('"' (digit|char)+ '"')

rule tokenize = parse
| whitespace { tokenize lexbuf }
| newline { lexbuf.EndPos <- lexbuf.EndPos.NextLine; tokenize lexbuf }

| "true" { BOOLEAN true }
| "false" { BOOLEAN false }

| "||" { OR }
| "&&" { AND }
| "+" { PLUS }
| "-" { MINUS }
| "*" { ASTER }
| "/" { SLASH }
| ">" { GREATER }
| "<" { LESS }

| "(" { LPAREN }
| ")" { RPAREN }

| identifier { ID (lexeme lexbuf) }
| digit+ { INT32 (Int32.Parse(lexeme lexbuf)) }
| digit+('.'digit+)?(['e''E']digit+)? { INT32 (Int32.Parse(lexeme lexbuf)) }
| string { STRING (lexeme lexbuf) }

| eof { EOF }
| _ { failwithf "unrecognized input: '%s'" (lexeme lexbuf) }
