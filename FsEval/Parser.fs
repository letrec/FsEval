// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "Parser.fsy"

open Ast

# 10 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | LPAREN
  | RPAREN
  | GREATER
  | LESS
  | PLUS
  | MINUS
  | ASTER
  | SLASH
  | UMINUS
  | ID of (string)
  | AND
  | OR
  | BOOLEAN of (bool)
  | STRING of (string)
  | FLOAT of (System.Double)
  | INT32 of (System.Int32)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_LPAREN
    | TOKEN_RPAREN
    | TOKEN_GREATER
    | TOKEN_LESS
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_ASTER
    | TOKEN_SLASH
    | TOKEN_UMINUS
    | TOKEN_ID
    | TOKEN_AND
    | TOKEN_OR
    | TOKEN_BOOLEAN
    | TOKEN_STRING
    | TOKEN_FLOAT
    | TOKEN_INT32
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_Expr

// This function maps tokens to integers indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | LPAREN  -> 1 
  | RPAREN  -> 2 
  | GREATER  -> 3 
  | LESS  -> 4 
  | PLUS  -> 5 
  | MINUS  -> 6 
  | ASTER  -> 7 
  | SLASH  -> 8 
  | UMINUS  -> 9 
  | ID _ -> 10 
  | AND  -> 11 
  | OR  -> 12 
  | BOOLEAN _ -> 13 
  | STRING _ -> 14 
  | FLOAT _ -> 15 
  | INT32 _ -> 16 

// This function maps integers indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_LPAREN 
  | 2 -> TOKEN_RPAREN 
  | 3 -> TOKEN_GREATER 
  | 4 -> TOKEN_LESS 
  | 5 -> TOKEN_PLUS 
  | 6 -> TOKEN_MINUS 
  | 7 -> TOKEN_ASTER 
  | 8 -> TOKEN_SLASH 
  | 9 -> TOKEN_UMINUS 
  | 10 -> TOKEN_ID 
  | 11 -> TOKEN_AND 
  | 12 -> TOKEN_OR 
  | 13 -> TOKEN_BOOLEAN 
  | 14 -> TOKEN_STRING 
  | 15 -> TOKEN_FLOAT 
  | 16 -> TOKEN_INT32 
  | 19 -> TOKEN_end_of_input
  | 17 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_Expr 
    | 3 -> NONTERM_Expr 
    | 4 -> NONTERM_Expr 
    | 5 -> NONTERM_Expr 
    | 6 -> NONTERM_Expr 
    | 7 -> NONTERM_Expr 
    | 8 -> NONTERM_Expr 
    | 9 -> NONTERM_Expr 
    | 10 -> NONTERM_Expr 
    | 11 -> NONTERM_Expr 
    | 12 -> NONTERM_Expr 
    | 13 -> NONTERM_Expr 
    | 14 -> NONTERM_Expr 
    | 15 -> NONTERM_Expr 
    | 16 -> NONTERM_Expr 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 19 
let _fsyacc_tagOfErrorTerminal = 17

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | LPAREN  -> "LPAREN" 
  | RPAREN  -> "RPAREN" 
  | GREATER  -> "GREATER" 
  | LESS  -> "LESS" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | ASTER  -> "ASTER" 
  | SLASH  -> "SLASH" 
  | UMINUS  -> "UMINUS" 
  | ID _ -> "ID" 
  | AND  -> "AND" 
  | OR  -> "OR" 
  | BOOLEAN _ -> "BOOLEAN" 
  | STRING _ -> "STRING" 
  | FLOAT _ -> "FLOAT" 
  | INT32 _ -> "INT32" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | LPAREN  -> (null : System.Object) 
  | RPAREN  -> (null : System.Object) 
  | GREATER  -> (null : System.Object) 
  | LESS  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | ASTER  -> (null : System.Object) 
  | SLASH  -> (null : System.Object) 
  | UMINUS  -> (null : System.Object) 
  | ID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | AND  -> (null : System.Object) 
  | OR  -> (null : System.Object) 
  | BOOLEAN _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | STRING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | FLOAT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INT32 _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 11us; 65535us; 0us; 2us; 19us; 9us; 20us; 10us; 21us; 11us; 23us; 12us; 24us; 13us; 25us; 14us; 26us; 15us; 27us; 16us; 28us; 17us; 29us; 18us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 9us; 1us; 7us; 8us; 10us; 11us; 12us; 13us; 14us; 15us; 1us; 1us; 1us; 2us; 1us; 3us; 1us; 4us; 1us; 5us; 1us; 6us; 9us; 7us; 7us; 8us; 10us; 11us; 12us; 13us; 14us; 15us; 9us; 7us; 8us; 8us; 10us; 11us; 12us; 13us; 14us; 15us; 9us; 7us; 8us; 9us; 10us; 11us; 12us; 13us; 14us; 15us; 9us; 7us; 8us; 10us; 10us; 11us; 12us; 13us; 14us; 15us; 9us; 7us; 8us; 10us; 11us; 11us; 12us; 13us; 14us; 15us; 9us; 7us; 8us; 10us; 11us; 12us; 12us; 13us; 14us; 15us; 9us; 7us; 8us; 10us; 11us; 12us; 13us; 13us; 14us; 15us; 9us; 7us; 8us; 10us; 11us; 12us; 13us; 14us; 14us; 15us; 9us; 7us; 8us; 10us; 11us; 12us; 13us; 14us; 15us; 15us; 9us; 7us; 8us; 10us; 11us; 12us; 13us; 14us; 15us; 16us; 1us; 7us; 1us; 8us; 1us; 9us; 1us; 9us; 1us; 10us; 1us; 11us; 1us; 12us; 1us; 13us; 1us; 14us; 1us; 15us; 1us; 16us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 14us; 16us; 18us; 20us; 22us; 24us; 26us; 36us; 46us; 56us; 66us; 76us; 86us; 96us; 106us; 116us; 126us; 128us; 130us; 132us; 134us; 136us; 138us; 140us; 142us; 144us; 146us; |]
let _fsyacc_action_rows = 30
let _fsyacc_actionTableElements = [|7us; 32768us; 1us; 21us; 6us; 29us; 10us; 4us; 13us; 7us; 14us; 8us; 15us; 6us; 16us; 5us; 0us; 49152us; 9us; 32768us; 0us; 3us; 3us; 27us; 4us; 28us; 5us; 23us; 6us; 24us; 7us; 25us; 8us; 26us; 11us; 20us; 12us; 19us; 0us; 16385us; 0us; 16386us; 0us; 16387us; 0us; 16388us; 0us; 16389us; 0us; 16390us; 6us; 16391us; 3us; 27us; 4us; 28us; 5us; 23us; 6us; 24us; 7us; 25us; 8us; 26us; 6us; 16392us; 3us; 27us; 4us; 28us; 5us; 23us; 6us; 24us; 7us; 25us; 8us; 26us; 9us; 32768us; 2us; 22us; 3us; 27us; 4us; 28us; 5us; 23us; 6us; 24us; 7us; 25us; 8us; 26us; 11us; 20us; 12us; 19us; 2us; 16394us; 3us; 27us; 4us; 28us; 2us; 16395us; 3us; 27us; 4us; 28us; 2us; 16396us; 3us; 27us; 4us; 28us; 2us; 16397us; 3us; 27us; 4us; 28us; 0us; 16398us; 0us; 16399us; 8us; 16400us; 3us; 27us; 4us; 28us; 5us; 23us; 6us; 24us; 7us; 25us; 8us; 26us; 11us; 20us; 12us; 19us; 7us; 32768us; 1us; 21us; 6us; 29us; 10us; 4us; 13us; 7us; 14us; 8us; 15us; 6us; 16us; 5us; 7us; 32768us; 1us; 21us; 6us; 29us; 10us; 4us; 13us; 7us; 14us; 8us; 15us; 6us; 16us; 5us; 7us; 32768us; 1us; 21us; 6us; 29us; 10us; 4us; 13us; 7us; 14us; 8us; 15us; 6us; 16us; 5us; 0us; 16393us; 7us; 32768us; 1us; 21us; 6us; 29us; 10us; 4us; 13us; 7us; 14us; 8us; 15us; 6us; 16us; 5us; 7us; 32768us; 1us; 21us; 6us; 29us; 10us; 4us; 13us; 7us; 14us; 8us; 15us; 6us; 16us; 5us; 7us; 32768us; 1us; 21us; 6us; 29us; 10us; 4us; 13us; 7us; 14us; 8us; 15us; 6us; 16us; 5us; 7us; 32768us; 1us; 21us; 6us; 29us; 10us; 4us; 13us; 7us; 14us; 8us; 15us; 6us; 16us; 5us; 7us; 32768us; 1us; 21us; 6us; 29us; 10us; 4us; 13us; 7us; 14us; 8us; 15us; 6us; 16us; 5us; 7us; 32768us; 1us; 21us; 6us; 29us; 10us; 4us; 13us; 7us; 14us; 8us; 15us; 6us; 16us; 5us; 7us; 32768us; 1us; 21us; 6us; 29us; 10us; 4us; 13us; 7us; 14us; 8us; 15us; 6us; 16us; 5us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 8us; 9us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 32us; 39us; 49us; 52us; 55us; 58us; 61us; 62us; 63us; 72us; 80us; 88us; 96us; 97us; 105us; 113us; 121us; 129us; 137us; 145us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 1us; 1us; 1us; 1us; 1us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 2us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 16386us; 16387us; 16388us; 16389us; 16390us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16393us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; |]
let _fsyacc_reductions ()  =    [| 
# 179 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 188 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 29 "Parser.fsy"
                                       _1 
                   )
# 29 "Parser.fsy"
                 : Ast.Expr));
# 199 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 32 "Parser.fsy"
                              Identifier(_1) 
                   )
# 32 "Parser.fsy"
                 : 'Expr));
# 210 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.Int32)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 33 "Parser.fsy"
                                 Integer(_1) 
                   )
# 33 "Parser.fsy"
                 : 'Expr));
# 221 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.Double)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 34 "Parser.fsy"
                                 Double(_1) 
                   )
# 34 "Parser.fsy"
                 : 'Expr));
# 232 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : bool)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 35 "Parser.fsy"
                                   Boolean(_1) 
                   )
# 35 "Parser.fsy"
                 : 'Expr));
# 243 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 36 "Parser.fsy"
                                  String(_1) 
                   )
# 36 "Parser.fsy"
                 : 'Expr));
# 254 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 37 "Parser.fsy"
                                        Or(_1, _3) 
                   )
# 37 "Parser.fsy"
                 : 'Expr));
# 266 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 38 "Parser.fsy"
                                         And(_1, _3) 
                   )
# 38 "Parser.fsy"
                 : 'Expr));
# 278 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 39 "Parser.fsy"
                                              Paren(_2) 
                   )
# 39 "Parser.fsy"
                 : 'Expr));
# 289 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 40 "Parser.fsy"
                                          Plus(_1, _3) 
                   )
# 40 "Parser.fsy"
                 : 'Expr));
# 301 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 41 "Parser.fsy"
                                           Minus(_1, _3) 
                   )
# 41 "Parser.fsy"
                 : 'Expr));
# 313 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 42 "Parser.fsy"
                                           Aster(_1, _3) 
                   )
# 42 "Parser.fsy"
                 : 'Expr));
# 325 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 43 "Parser.fsy"
                                           Slash(_1, _3) 
                   )
# 43 "Parser.fsy"
                 : 'Expr));
# 337 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 44 "Parser.fsy"
                                             Greater(_1, _3) 
                   )
# 44 "Parser.fsy"
                 : 'Expr));
# 349 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 45 "Parser.fsy"
                                          Less(_1, _3) 
                   )
# 45 "Parser.fsy"
                 : 'Expr));
# 361 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 46 "Parser.fsy"
                                                   Negate(_2) 
                   )
# 46 "Parser.fsy"
                 : 'Expr));
|]
# 373 "Parser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 20;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : Ast.Expr =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
